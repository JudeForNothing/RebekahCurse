local mod = yandereWaifu
local game = InutilLib.game

-- autogenerated from achievements
local lockedItems = {}
local lockedTrinkets = {}
local lockedCards = {}

local playerToCompletionManagerName = {
	[RebekahCurse.TECHNICAL_REB] = "Technical Rebekah",
	[RebekahCurse.SADREBEKAH] = "Technical RebekahB",
}

local Achievement = StageAPI.Class("Achievement")

function Achievement:Init(id, tbl)
	self.ID = id

	if tbl.Note then
		self.Note = "gfx/ui/achievement/" .. tbl.Note .. ".png"
		self.Sprite = Sprite()
		self.Sprite:Load("gfx/ui/achievement/_cab_achievement.anm2", false)
		self.Sprite:ReplaceSpritesheet(0, "gfx/nothing.png")
		self.Sprite:ReplaceSpritesheet(2, self.Note)
		self.Sprite:LoadGraphics()
	end

	if tbl.Item then
		self.Item = tbl.Item
		if type(tbl.Item) ~= "table" then
			self.Item = {tbl.Item}
		end

		for _, item in ipairs(self.Item) do
			lockedItems[item] = self
		end
	end

	if tbl.Card then
		self.Card = tbl.Card
		if type(tbl.Card) ~= "table" then
			self.Card = {tbl.Card}
		end

		for _, card in ipairs(self.Card) do
			lockedCards[card] = self
		end
	end

	if tbl.Trinket then
		self.Trinket = tbl.Trinket
		if type(tbl.Trinket) ~= "table" then
			self.Trinket = {tbl.Trinket}
		end

		for _, trinket in ipairs(self.Trinket) do
			lockedTrinkets[trinket] = self
		end
	end

	if tbl.CompletionMark then
		self.CompletionMark = {
			Player = tbl.CompletionMark[1],
			Mark = tbl.CompletionMark[2]
		}
		self.CompletionMark.PlayerName = playerToCompletionManagerName[self.CompletionMark.Player]
	end

	self.Tags = {}
	if tbl.Tags then
		for i, tag in ipairs(tbl.Tags) do
			self.Tags[i] = tag
			self.Tags[tag] = true
		end
	end

	self.NoInsertTags = {}
	if tbl.NoInsertTags then
		for i, tag in ipairs(tbl.NoInsertTags) do
			self.NoInsertTags[i] = tag
			self.NoInsertTags[tag] = true
		end
	end

	self.Name = tbl.Name
	self.Group = tbl.Group
	self.NoMenu = tbl.NoMenu
	if tbl.Tooltip then
		if not self.Name then
			self.Name = string.gsub(string.lower(tbl.Note), "_", " ")
		end

		self.Tooltip = tbl.Tooltip

		if not self.NoMenu then
			self.MenuButton = {
				str = self.Name,
				choices = {"locked", "unlocked"},
				variable = self.ID,
				setting = 1,
				load = function()
					return self:IsUnlocked(true) and 2 or 1
				end,
				store = function(var)
					self:SetUnlocked(var == 2)
				end,
				changefunc = function(button)
					self:SetUnlocked(button.setting == 2)
				end,
				tooltip = {strset = self.Tooltip}
			}
		end
	end

	if tbl.ViewerTooltip then
		self.ViewerTooltip = tbl.ViewerTooltip
	end

	self.ViewerDisplayIf = tbl.ViewerDisplayIf

	self.NoCountCompletion = tbl.NoCountCompletion -- Achievement is not required for 100% completion
	self.AlwaysUnlocked    = tbl.AlwaysUnlocked	   -- Achievement is always unlocked, will always be visible on the viewer, and has no unlock condition
	self.AlwaysUnlock 	   = tbl.AlwaysUnlock 	   -- Achievement cannot be blocked from unlocking except by Basement Renovator
	self.Challenge 		   = tbl.Challenge 		   -- Achievement uses the Challenge unlocks condition to test whether this unlock should be prevented
	self.Unobtainable 	   = tbl.Unobtainable	   -- In case you want to make an unobtainable achievement for some reason?

	if self.Unobtainable or self.AlwaysUnlocked then
		self.NoCountCompletion = true
	end
end

function Achievement:IsUnlocked(ignoreModifiers)
	if self.Unobtainable then
		return false
	end

	if self.AlwaysUnlocked then
		return true
	end

	Isaac.DebugString(tostring(self.Name))
	local canLock = yandereWaifu.AreAchievementsEnabled()
	if not canLock and not ignoreModifiers then
		return true
	end

	-- sometimes unlock checks will run before save data is loaded
	return RebekahLocalSavedata.Unlocks and RebekahLocalSavedata.Unlocks[self.ID] == true
end

function Achievement:Unlock(noNote)
	if self.Unobtainable or self.AlwaysUnlocked then
		return
	end

	print("goes here ine")

	if not self:IsUnlocked(true) then
		print("goes here too")
		local canLock, canUnlockAchievements, canUnlockChallengeAchievements, blockAlwaysUnlock = yandereWaifu.AreAchievementsEnabled()
		print(canLock)
		print(canUnlockChallengeAchievements)
		print(blockAlwaysUnlock)
		if canUnlockAchievements or (canUnlockChallengeAchievements and self.Challenge) or (self.AlwaysUnlock and not blockAlwaysUnlock) then
			self:SetUnlocked(true)

			print("goes here transcedence")

			InutilLib.AnimateIsaacAchievement(self.Note, nil, true)

			--[[if canLock and not noNote then
				yandereWaifu.QueueAchievementNote(self.Note)
				yandereWaifu.PostAchievementUpdate(noNote)
			end]]
		end
	end
end

function Achievement:SetUnlocked(bool)
	if not self.AlwaysUnlocked then
		RebekahLocalSavedata.Unlocks[self.ID] = bool
	end
end

yandereWaifu.ACHIEVEMENT_ORDERED = {}
yandereWaifu.TOTAL_COMPLETION_ACHIEVEMENTS = 0

for i, achievementData in ipairs(yandereWaifu.ACHIEVEMENT) do
	local achievement = Achievement(achievementData.ID, achievementData)
	if not achievement.NoCountCompletion then
		yandereWaifu.TOTAL_COMPLETION_ACHIEVEMENTS = yandereWaifu.TOTAL_COMPLETION_ACHIEVEMENTS + 1
	end

	yandereWaifu.ACHIEVEMENT[i] = nil
	yandereWaifu.ACHIEVEMENT[achievementData.ID] = achievement
	yandereWaifu.ACHIEVEMENT_ORDERED[i] = yandereWaifu.ACHIEVEMENT[achievementData.ID]
end

-- Returns:
--[[
	1: Can achievements lock features
	2: Can achievements be unlocked
	3: Can achievements with the Challenge attribute be unlocked
	4: Are achievements with the AlwaysUnlock attribute blocked
]]
function yandereWaifu.AreAchievementsEnabled()
	if BasementRenovator and BasementRenovator.InTestRoom and BasementRenovator.InTestStage and (BasementRenovator:InTestRoom() or BasementRenovator:InTestStage()) then
		return false, false, false, true
	end

    --RebekahLocalSavedata.Config.disableAchievements = false
	if RebekahLocalSavedata.Config.disableAchievements then
		return false, yandereWaifu.CanRunUnlockAchievements(), yandereWaifu.CanChallengeRunUnlockAchievements(), false
	end

	return true, yandereWaifu.CanRunUnlockAchievements(), yandereWaifu.CanChallengeRunUnlockAchievements(), false
end

function yandereWaifu.GetNumCompletedAchievements()
	local count = 0
	for _, achievement in ipairs(yandereWaifu.ACHIEVEMENT_ORDERED) do
		if achievement:IsUnlocked(true) and not achievement.NoCountCompletion then
			count = count + 1
		end
	end

	return count
end

function yandereWaifu.GetAchievementsWithTag(tag)

	local achievements = {}
	for _, achievement in ipairs(yandereWaifu.ACHIEVEMENT_ORDERED) do
		if not tag or achievement.Tags[tag] then
			achievements[#achievements + 1] = achievement
		end
	end

	return achievements
end

function yandereWaifu.GetAchievement(name)

	for _, achievement in ipairs(yandereWaifu.ACHIEVEMENT_ORDERED) do
		--print(achievement.ID)
		if achievement.ID == name then
			--print(achievement.ID)
			--print(name)
			return achievement
		end
	end
end

function yandereWaifu.GetMenuButtonsForAchievementTag(tag)
	local achievements = yandereWaifu.GetAchievementsWithTag(tag)
	local buttons = {}
	for _, achievement in ipairs(achievements) do
		if achievement.MenuButton and not achievement.NoInsertTags[tag] then
			if #buttons ~= 0 then
				buttons[#buttons + 1] = {str = "", fsize = 1, nosel = true}
			end

			buttons[#buttons + 1] = achievement.MenuButton
		end
	end

	return buttons
end

function yandereWaifu.GetAchievementCompletionMarkData(playerType)
	local out = {}
	for _, achievement in ipairs(yandereWaifu.ACHIEVEMENT_ORDERED) do
		if achievement.CompletionMark and achievement.CompletionMark.Player == string.lower(playerType) then
			out[achievement.CompletionMark.Mark] = {
				"null",
				nil,
				function()
					achievement:Unlock()
				end
			}
		end
	end
	--table.insert(out, Quartet, {"", nil, function()  end})
	--table.insert(out, Duet, {"", nil, function()  end})
	
	return out
end

function yandereWaifu.InitCharacterCompletionMarks()
	yandereWaifu.InitCharacterCompletion("Technical Rebekah", false)
	yandereWaifu.AssociateCompletionUnlocks(RebekahCurse.TECHNICAL_REB, yandereWaifu.GetAchievementCompletionMarkData(RebekahCurse.TECHNICAL_REB))

	yandereWaifu.InitCharacterCompletion("Technical Rebekah", true)
	yandereWaifu.AssociateCompletionUnlocks(RebekahCurse.SADREBEKAH, yandereWaifu.GetAchievementCompletionMarkData(RebekahCurse.SADREBEKAH))
end

yandereWaifu:AddCallback(ModCallbacks.MC_POST_GAME_STARTED, function(_,IsContinued)
	yandereWaifu.InitCharacterCompletionMarks()
end)

-- If for some reason you get all completion marks, and then choose to re-lock the items locked behind them, this will unlock them on game start
function yandereWaifu.TryUnlockCompletionAchievements()
	for _, achievement in ipairs(yandereWaifu.ACHIEVEMENT_ORDERED) do
		if achievement.CompletionMark and not achievement:IsUnlocked() then
			if yandereWaifu.IsCompletionMarkUnlocked(achievement.CompletionMark.PlayerName, achievement.CompletionMark.Mark) then
				achievement:Unlock(true)
			end
		end
	end
end

-- Basics, remove not-unlocked collectibles, trinkets, cards from pool
function yandereWaifu.IsCollectibleLocked(id, ignoreModifiers)
	if lockedItems[id] then
		return not lockedItems[id]:IsUnlocked(ignoreModifiers)
	else
		return false
	end
end

function yandereWaifu.IsTrinketLocked(id, ignoreModifiers)
	if lockedTrinkets[id] then
		return not lockedTrinkets[id]:IsUnlocked(ignoreModifiers)
	else
		return false
	end
end

function yandereWaifu.IsCardLocked(id, ignoreModifiers)
	if lockedCards[id] then
		return not lockedCards[id]:IsUnlocked(ignoreModifiers)
	else
		return false
	end
end

--FF STUFF I DONT NEED
--[[
	yandereWaifu.AchievementTrackerTrinkets = {
	IsaacSoulUnlocked 		= Isaac.GetTrinketIdByName("ISAAC_SOUL_TRACKER"),
	MaggySoulUnlocked 		= Isaac.GetTrinketIdByName("MAGGY_SOUL_TRACKER"),
	CainSoulUnlocked 		= Isaac.GetTrinketIdByName("CAIN_SOUL_TRACKER"),
	JudasSoulUnlocked 		= Isaac.GetTrinketIdByName("JUDAS_SOUL_TRACKER"),
	BlueBabySoulUnlocked 	= Isaac.GetTrinketIdByName("BLUE_BABY_SOUL_TRACKER"),
	EveSoulUnlocked 		= Isaac.GetTrinketIdByName("EVE_SOUL_TRACKER"),
	SamsonSoulUnlocked 		= Isaac.GetTrinketIdByName("SAMSON_SOUL_TRACKER"),
	AzazelSoulUnlocked 		= Isaac.GetTrinketIdByName("AZAZEL_SOUL_TRACKER"),
	LazarusSoulUnlocked 	= Isaac.GetTrinketIdByName("LAZARUS_SOUL_TRACKER"),
	EdenSoulUnlocked 		= Isaac.GetTrinketIdByName("EDEN_SOUL_TRACKER"),
	LostSoulUnlocked 		= Isaac.GetTrinketIdByName("LOST_SOUL_TRACKER"),
	LilithSoulUnlocked 		= Isaac.GetTrinketIdByName("LILITH_SOUL_TRACKER"),
	KeeperSoulUnlocked 		= Isaac.GetTrinketIdByName("KEEPER_SOUL_TRACKER"),
	ApollyonSoulUnlocked 	= Isaac.GetTrinketIdByName("APOLLYON_SOUL_TRACKER"),
	ForgottenSoulUnlocked 	= Isaac.GetTrinketIdByName("FORGOTTEN_SOUL_TRACKER"),
	BethanySoulUnlocked 	= Isaac.GetTrinketIdByName("BETHANY_SOUL_TRACKER"),
	JacobSoulUnlocked 		= Isaac.GetTrinketIdByName("JACOB_SOUL_TRACKER"),
	HorsePillsUnlocked		= Isaac.GetTrinketIdByName("HORSE_PILLS_TRACKER"),
	GoldenBatteryUnlocked	= Isaac.GetTrinketIdByName("GOLDEN_BATTERY_TRACKER"),
	GoldenTrinketsUnlocked	= Isaac.GetTrinketIdByName("GOLDEN_TRINKETS_TRACKER"),
	GoldenHeartsUnlocked	= Isaac.GetTrinketIdByName("GOLDEN_HEART_TRACKER"),
	HalfSoulHeartsUnlocked	= Isaac.GetTrinketIdByName("HALF_SOUL_HEART_TRACKER"), -- Technically just an Everything is Terrible!!! tracker
	ScaredHeartsUnlocked	= Isaac.GetTrinketIdByName("SCARED_HEART_TRACKER"),
	BoneHeartsUnlocked		= Isaac.GetTrinketIdByName("BONE_HEART_TRACKER"),
	RottenHeartsUnlocked	= Isaac.GetTrinketIdByName("ROTTEN_HEART_TRACKER"),
	GoldenPillsUnlocked		= Isaac.GetTrinketIdByName("GOLDEN_PILL_TRACKER"),
	GoldenBombsUnlocked		= Isaac.GetTrinketIdByName("GOLDEN_BOMB_TRACKER"),
	LuckyPennyUnlocked		= Isaac.GetTrinketIdByName("LUCKY_PENNY_TRACKER"),
	StickyNickelUnlocked	= Isaac.GetTrinketIdByName("STICKY_NICKEL_TRACKER"),
	GoldenPennyUnlocked		= Isaac.GetTrinketIdByName("GOLDEN_PENNY_TRACKER"),
	ChargedKeyUnlocked		= Isaac.GetTrinketIdByName("CHARGED_KEY_TRACKER"),
	CellarUnlocked			= Isaac.GetTrinketIdByName("CELLAR_TRACKER"),
	WombUnlocked			= Isaac.GetTrinketIdByName("WOMB_TRACKER"), -- This is the achievement that determines whether having mods enabled disables unlocks
	HagalazUnlocked			= Isaac.GetTrinketIdByName("HAGALAZ_TRACKER"),
	JeraUnlocked			= Isaac.GetTrinketIdByName("JERA_TRACKER"),
	EhwazUnlocked			= Isaac.GetTrinketIdByName("EHWAZ_TRACKER"),
	DagazUnlocked			= Isaac.GetTrinketIdByName("DAGAZ_TRACKER"),
	AnsuzUnlocked			= Isaac.GetTrinketIdByName("ANSUZ_TRACKER"),
	PerthroUnlocked			= Isaac.GetTrinketIdByName("PERTHRO_TRACKER"),
	BerkanoUnlocked			= Isaac.GetTrinketIdByName("BERKANO_TRACKER"),
	AlgizUnlocked			= Isaac.GetTrinketIdByName("ALGIZ_TRACKER"),
	BlankRuneUnlocked		= Isaac.GetTrinketIdByName("BLANK_RUNE_TRACKER"),
	BlackRuneUnlocked		= Isaac.GetTrinketIdByName("BLACK_RUNE_TRACKER"),
	BlackSackUnlocked		= Isaac.GetTrinketIdByName("BLACK_SACK_TRACKER"),
}]]

--[[if Encyclopedia then
	for _, id in pairs(yandereWaifu.AchievementTrackerTrinkets) do
		Encyclopedia.AddTrinket({
			Class = "Fiend Folio",
			ID = id,
			WikiDesc = "",
			Hide = true,
			ModName = "Fiend Folio",
		})
	end
end]]

--[[local achievementTrackerIds = {}
for name, id in pairs(yandereWaifu.AchievementTrackerTrinkets) do
	achievementTrackerIds[id] = true
	ffAzuriteSpindownList[id] = true
end]]

yandereWaifu.TrinketsByID = {}
for name, id in pairs(RebekahCurse.Trinkets) do
	yandereWaifu.TrinketsByID[id] = true
end

yandereWaifu.ItemsByID = {}
for name, id in pairs(RebekahCurse.Items) do
	yandereWaifu.ItemsByID[id] = true
end

yandereWaifu.CardsByID = {}
for name, id in pairs(RebekahCurse.Cards) do
	yandereWaifu.CardsByID[id] = true
end

function yandereWaifu.RemoveLockedCollectiblesFromPool()
	local pool = game:GetItemPool()
	for id, achievement in pairs(lockedItems) do
		if not achievement:IsUnlocked() then
			pool:RemoveCollectible(id)
		end
	end

	if not RebekahLocalSavedata.Config.itemsEnabled then
		for _, id in pairs(RebekahCurse.Items) do
			pool:RemoveCollectible(id)
		end
	end
end

function yandereWaifu.RemoveLockedTrinketsFromPool()
	local pool = game:GetItemPool()
	for id, achievement in pairs(lockedTrinkets) do
		if not achievement:IsUnlocked() then
			pool:RemoveTrinket(id)
		end
	end

	--[[for id, _ in pairs(achievementTrackerIds) do
		pool:RemoveTrinket(id)
	end]]

	if not RebekahLocalSavedata.Config.itemsEnabled then
		for _, id in pairs(RebekahCurse.Trinkets) do
			pool:RemoveTrinket(id)
		end
	end
end

function yandereWaifu.RemoveLockedFromPools()
	yandereWaifu.RemoveLockedCollectiblesFromPool()
	yandereWaifu.RemoveLockedTrinketsFromPool()
end

--Card stuff stolen fron FF
yandereWaifu.FFBumpedOddsCards = {
    [RebekahCurse.Cards.CARD_QUALITYTIME] = 5,		-- n = how many rolls are allowed to get this card
    [RebekahCurse.Cards.CARD_ACTOFSERVICE] 	= 5,		-- The function will roll as many times as the greatest n
    [RebekahCurse.Cards.CARD_GIFTGIVING] = 5,
    [RebekahCurse.Cards.CARD_PHYSICALTOUCH] = 5,
    [RebekahCurse.Cards.CARD_WORDSOFAFFIRMATION] = 5,
}

local maxBumpAttempts = 0
for _, value in pairs(yandereWaifu.FFBumpedOddsCards) do if value > maxBumpAttempts then maxBumpAttempts = value end end


local antiRecursion
local skipGetCard
yandereWaifu:AddCallback(ModCallbacks.MC_GET_CARD, function(_, rng, card, canSuit, canRune, forceRune)
	local itempool = game:GetItemPool()
	local returnValue
	local getCardRNG = RNG()
	getCardRNG:SetSeed(Game():GetSeeds():GetStartSeed(), 35)
	if canSuit and not yandereWaifu.FFBumpedOddsCards[card] and skipGetCard then
		skipGetCard = true
		for i = 1, maxBumpAttempts do
			local new = itempool:GetCard(getCardRNG:Next(), canSuit, canRune, forceRune)
			if yandereWaifu.FFBumpedOddsCards[new] and i <= yandereWaifu.FFBumpedOddsCards[new] and not yandereWaifu.NoCardNaturalSpawn(new, getCardRNG) then
				returnValue = new
				goto getCardEnd
			end
		end
	end

	

	if (yandereWaifu.IsCardLocked(card) or yandereWaifu.NoCardNaturalSpawn(card)) and not antiRecursion then
		antiRecursion = true

		local new
		local i = 0

		repeat
			i = i + 1
			new = itempool:GetCard(rng:GetSeed() + i, canSuit, canRune, forceRune)
		until not (yandereWaifu.IsCardLocked(new) or yandereWaifu.NoCardNaturalSpawn(new))

		antiRecursion = false

		returnValue = new
	end
	::getCardEnd::
	skipGetCard = false
	if returnValue == card then
		-- FF says
		-- We didn't change the spawned card. Return nil to avoid stepping the toes of other mods trying to do card replacements.
		return nil
	end
	return returnValue
end)

yandereWaifu:AddCallback(ModCallbacks.MC_GET_TRINKET, function(_, trinket, rng)
	if (--[[achievementTrackerIds[trinket] or]] yandereWaifu.IsTrinketLocked(trinket) or (not RebekahLocalSavedata.Config.itemsEnabled and yandereWaifu.TrinketsByID[trinket])) and not antiRecursion then
		antiRecursion = true

		yandereWaifu.RemoveLockedTrinketsFromPool()

		local itempool = game:GetItemPool()
		local new = itempool:GetTrinket()

		antiRecursion = false

		return new
	end
end)


--FF STUFF I DONT NEED MAYBE

function yandereWaifu.InitAchievementTrackers()
	local itempool = game:GetItemPool()
	yandereWaifu.AchievementTrackers = {}
	for name, id in pairs(yandereWaifu.AchievementTrackerTrinkets) do
		yandereWaifu.AchievementTrackers[name] = itempool:RemoveTrinket(id)
	end

	--yandereWaifu.PostAchievementUpdate()
end

function yandereWaifu.AchievementsPostGameStart()
	yandereWaifu.TryUnlockCompletionAchievements()
	--yandereWaifu.InitAchievementTrackers()
	yandereWaifu.RemoveLockedFromPools()
end

yandereWaifu:AddCallback(ModCallbacks.MC_POST_GAME_STARTED, yandereWaifu.AchievementsPostGameStart)

function yandereWaifu.GetAchievementSetUnlockCount(set)
	local count = 0
	for _, name in ipairs(set) do
		if yandereWaifu.AchievementTrackers[name] == true then
			count = count + 1
		elseif yandereWaifu.ACHIEVEMENT[name] then
			if yandereWaifu.ACHIEVEMENT[name]:IsUnlocked(true) then
				count = count + 1
			end
		end
	end

	return count
end

function yandereWaifu.IsAchievementSetUnlocked(set)
	return yandereWaifu.GetAchievementSetUnlockCount(set) == #set
end

function yandereWaifu.CanRunUnlockAchievements(forceNew) -- Made in conjunction with Thicco Catto
	if yandereWaifu.CurrentRunCanGrantUnlocks ~= nil and not forceNew then return yandereWaifu.CurrentRunCanGrantUnlocks end
	local machine = Isaac.Spawn(6, 11, 0, Vector.Zero, Vector.Zero, nil)
	yandereWaifu.CurrentRunCanGrantUnlocks = machine:Exists()
	machine:Remove()

	Isaac.DebugString("HELDDFDFDFDFASAF")
	return yandereWaifu.CurrentRunCanGrantUnlocks
end

yandereWaifu:AddCallback(ModCallbacks.MC_PRE_GAME_EXIT, function() yandereWaifu.CurrentRunCanGrantUnlocks = nil end)
yandereWaifu:AddCallback(ModCallbacks.MC_POST_GAME_END, function() yandereWaifu.CurrentRunCanGrantUnlocks = nil end)
yandereWaifu:AddCallback(ModCallbacks.MC_POST_GAME_STARTED, function() yandereWaifu.CurrentRunCanGrantUnlocks = nil end)

function yandereWaifu.CanChallengeRunUnlockAchievements()
	--always true because i dont have them trackers
	--return yandereWaifu.AchievementTrackers and yandereWaifu.AchievementTrackers.WombUnlocked
	return true
end

------------------------------------------
-- RANDOM UNLOCK CONDITIONS START HERE! --
------------------------------------------

--i stole this from FF, ill clear it soon
-- every other challenge!
yandereWaifu:AddCallback(ModCallbacks.MC_PRE_PICKUP_COLLISION, function(_, pickup, collider)
	if collider:ToPlayer() then
		if InutilLib.game.Challenge == RebekahCurse.Challenges.TheTrueFamilyGuy then
			if not yandereWaifu.ACHIEVEMENT.TRUE_FAMILY_GUY:IsUnlocked(true) then
				yandereWaifu.ACHIEVEMENT.TRUE_FAMILY_GUY:Unlock()
				--InutilLib.AnimateIsaacAchievement("gfx/ui/achievement/achievement_twin_vision.png", nil, true, 60)
			end
		elseif InutilLib.game.Challenge == RebekahCurse.Challenges.IdentityCrisis then
			if not yandereWaifu.ACHIEVEMENT.IDENTITY_CRISIS:IsUnlocked(true) then
				yandereWaifu.ACHIEVEMENT.IDENTITY_CRISIS:Unlock()
				--InutilLib.AnimateIsaacAchievement("gfx/ui/achievement/achievement_body_dysmorphia.png", nil, true, 60)
			end
		elseif InutilLib.game.Challenge == RebekahCurse.Challenges.EasterHunt then
			if not yandereWaifu.ACHIEVEMENT.EASTER_HUNT:IsUnlocked(true) then
				yandereWaifu.ACHIEVEMENT.EASTER_HUNT:Unlock()
				--InutilLib.AnimateIsaacAchievement("gfx/ui/achievement/achievement_body_dysmorphia.png", nil, true, 60)
			end
		elseif InutilLib.game.Challenge == RebekahCurse.Challenges.OldMaid then
			if not yandereWaifu.ACHIEVEMENT.OLD_MAID:IsUnlocked(true) then
				yandereWaifu.ACHIEVEMENT.OLD_MAID:Unlock()
				--InutilLib.AnimateIsaacAchievement("gfx/ui/achievement/achievement_body_dysmorphia.png", nil, true, 60)
			end
		end
	end
end, PickupVariant.PICKUP_TROPHY)


-- Unlocks based on sets of unlocks
-- Soul of random, deluxe, kings of the minor arcana, flea circus
