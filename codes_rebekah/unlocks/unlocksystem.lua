local mod = yandereWaifu
local game = ILIB.game

-- autogenerated from achievements
local lockedItems = {}
local lockedTrinkets = {}
local lockedCards = {}

local playerToCompletionManagerName = {
	[RebekahCurse.TECHNICAL_REB] = "Technical Rebekah",
	[RebekahCurse.SADREBEKAH] = "Technical B Rebekah",
}

local Achievement = StageAPI.Class("Achievement")

function Achievement:Init(id, tbl)
	self.ID = id

	if tbl.Note then
		self.Note = "gfx/ui/achievement/" .. tbl.Note .. ".png"
		self.Sprite = Sprite()
		self.Sprite:Load("gfx/ui/achievement/_cab_achievement.anm2", false)
		self.Sprite:ReplaceSpritesheet(0, "gfx/nothing.png")
		self.Sprite:ReplaceSpritesheet(2, self.Note)
		self.Sprite:LoadGraphics()
	end

	if tbl.Item then
		self.Item = tbl.Item
		if type(tbl.Item) ~= "table" then
			self.Item = {tbl.Item}
		end

		for _, item in ipairs(self.Item) do
			lockedItems[item] = self
		end
	end

	if tbl.Card then
		self.Card = tbl.Card
		if type(tbl.Card) ~= "table" then
			self.Card = {tbl.Card}
		end

		for _, card in ipairs(self.Card) do
			lockedCards[card] = self
		end
	end

	if tbl.Trinket then
		self.Trinket = tbl.Trinket
		if type(tbl.Trinket) ~= "table" then
			self.Trinket = {tbl.Trinket}
		end

		for _, trinket in ipairs(self.Trinket) do
			lockedTrinkets[trinket] = self
		end
	end

	if tbl.CompletionMark then
		self.CompletionMark = {
			Player = tbl.CompletionMark[1],
			Mark = tbl.CompletionMark[2]
		}
		self.CompletionMark.PlayerName = playerToCompletionManagerName[self.CompletionMark.Player]
	end

	self.Tags = {}
	if tbl.Tags then
		for i, tag in ipairs(tbl.Tags) do
			self.Tags[i] = tag
			self.Tags[tag] = true
		end
	end

	self.NoInsertTags = {}
	if tbl.NoInsertTags then
		for i, tag in ipairs(tbl.NoInsertTags) do
			self.NoInsertTags[i] = tag
			self.NoInsertTags[tag] = true
		end
	end

	self.Name = tbl.Name
	self.Group = tbl.Group
	self.NoMenu = tbl.NoMenu
	if tbl.Tooltip then
		if not self.Name then
			self.Name = string.gsub(string.lower(tbl.Note), "_", " ")
		end

		self.Tooltip = tbl.Tooltip

		if not self.NoMenu then
			self.MenuButton = {
				str = self.Name,
				choices = {"locked", "unlocked"},
				variable = self.ID,
				setting = 1,
				load = function()
					return self:IsUnlocked(true) and 2 or 1
				end,
				store = function(var)
					self:SetUnlocked(var == 2)
				end,
				changefunc = function(button)
					self:SetUnlocked(button.setting == 2)
				end,
				tooltip = {strset = self.Tooltip}
			}
		end
	end

	if tbl.ViewerTooltip then
		self.ViewerTooltip = tbl.ViewerTooltip
	end

	self.ViewerDisplayIf = tbl.ViewerDisplayIf

	self.NoCountCompletion = tbl.NoCountCompletion -- Achievement is not required for 100% completion
	self.AlwaysUnlocked    = tbl.AlwaysUnlocked	   -- Achievement is always unlocked, will always be visible on the viewer, and has no unlock condition
	self.AlwaysUnlock 	   = tbl.AlwaysUnlock 	   -- Achievement cannot be blocked from unlocking except by Basement Renovator
	self.Challenge 		   = tbl.Challenge 		   -- Achievement uses the Challenge unlocks condition to test whether this unlock should be prevented
	self.Unobtainable 	   = tbl.Unobtainable	   -- In case you want to make an unobtainable achievement for some reason?

	if self.Unobtainable or self.AlwaysUnlocked then
		self.NoCountCompletion = true
	end
end

function Achievement:IsUnlocked(ignoreModifiers)
	if self.Unobtainable then
		return false
	end

	if self.AlwaysUnlocked then
		return true
	end

	local canLock = yandereWaifu.AreAchievementsEnabled()
	if not canLock and not ignoreModifiers then
		return true
	end

	-- sometimes unlock checks will run before save data is loaded
	return RebekahLocalSavedata.Unlocks and RebekahLocalSavedata.Unlocks[self.ID] == true
end

function Achievement:Unlock(noNote)
	if self.Unobtainable or self.AlwaysUnlocked then
		return
	end

	if not self:IsUnlocked(true) then
		local canLock, canUnlockAchievements, canUnlockChallengeAchievements, blockAlwaysUnlock = yandereWaifu.AreAchievementsEnabled()
		if canUnlockAchievements or (canUnlockChallengeAchievements and self.Challenge) or (self.AlwaysUnlock and not blockAlwaysUnlock) then
			self:SetUnlocked(true)

			--[[if canLock and not noNote then
				yandereWaifu.QueueAchievementNote(self.Note)
				yandereWaifu.PostAchievementUpdate(noNote)
			end]]
		end
	end
end

function Achievement:SetUnlocked(bool)
	if not self.AlwaysUnlocked then
		RebekahLocalSavedata.Unlocks[self.ID] = bool
	end
end

yandereWaifu.ACHIEVEMENT_ORDERED = {}
yandereWaifu.TOTAL_COMPLETION_ACHIEVEMENTS = 0

for i, achievementData in ipairs(yandereWaifu.ACHIEVEMENT) do
	local achievement = Achievement(achievementData.ID, achievementData)
	if not achievement.NoCountCompletion then
		yandereWaifu.TOTAL_COMPLETION_ACHIEVEMENTS = yandereWaifu.TOTAL_COMPLETION_ACHIEVEMENTS + 1
	end

	yandereWaifu.ACHIEVEMENT[i] = nil
	yandereWaifu.ACHIEVEMENT[achievementData.ID] = achievement
	yandereWaifu.ACHIEVEMENT_ORDERED[i] = yandereWaifu.ACHIEVEMENT[achievementData.ID]
end

-- Returns:
--[[
	1: Can achievements lock features
	2: Can achievements be unlocked
	3: Can achievements with the Challenge attribute be unlocked
	4: Are achievements with the AlwaysUnlock attribute blocked
]]
function yandereWaifu.AreAchievementsEnabled()
	if BasementRenovator and BasementRenovator.InTestRoom and BasementRenovator.InTestStage and (BasementRenovator:InTestRoom() or BasementRenovator:InTestStage()) then
		return false, false, false, true
	end

    RebekahLocalSavedata.Config.disableAchievements = false
	if RebekahLocalSavedata.Config.disableAchievements then
		return false, yandereWaifu.CanRunUnlockAchievements(), yandereWaifu.CanChallengeRunUnlockAchievements(), false
	end

	return true, yandereWaifu.CanRunUnlockAchievements(), yandereWaifu.CanChallengeRunUnlockAchievements(), false
end

function yandereWaifu.GetNumCompletedAchievements()
	local count = 0
	for _, achievement in ipairs(yandereWaifu.ACHIEVEMENT_ORDERED) do
		if achievement:IsUnlocked(true) and not achievement.NoCountCompletion then
			count = count + 1
		end
	end

	return count
end

function yandereWaifu.GetAchievementsWithTag(tag)

	local achievements = {}
	for _, achievement in ipairs(yandereWaifu.ACHIEVEMENT_ORDERED) do
		if not tag or achievement.Tags[tag] then
			achievements[#achievements + 1] = achievement
		end
	end

	return achievements
end

function yandereWaifu.GetAchievement(name)

	for _, achievement in ipairs(yandereWaifu.ACHIEVEMENT_ORDERED) do
		--print(achievement.ID)
		if achievement.ID == name then
			--print(achievement.ID)
			--print(name)
			return achievement
		end
	end
end

function yandereWaifu.GetMenuButtonsForAchievementTag(tag)
	local achievements = yandereWaifu.GetAchievementsWithTag(tag)
	local buttons = {}
	for _, achievement in ipairs(achievements) do
		if achievement.MenuButton and not achievement.NoInsertTags[tag] then
			if #buttons ~= 0 then
				buttons[#buttons + 1] = {str = "", fsize = 1, nosel = true}
			end

			buttons[#buttons + 1] = achievement.MenuButton
		end
	end

	return buttons
end

function yandereWaifu.GetAchievementCompletionMarkData(playerType)
	local out = {}
	for _, achievement in ipairs(yandereWaifu.ACHIEVEMENT_ORDERED) do
		if achievement.CompletionMark and achievement.CompletionMark.Player == playerType then
			out[achievement.CompletionMark.Mark] = {
				"null",
				nil,
				function()
					achievement:Unlock()
				end
			}
		end
	end

	return out
end

function yandereWaifu.InitCharacterCompletionMarks()
	print("init STUFF I COPIED FROM FF")
	yandereWaifu.InitCharacterCompletion("Technical Rebekah", false)
	yandereWaifu.AssociateCompletionUnlocks(RebekahCurse.TECHNICAL_REB, yandereWaifu.GetAchievementCompletionMarkData(RebekahCurse.TECHNICAL_REB))

	yandereWaifu.InitCharacterCompletion("Technical B Rebekah", true)
	yandereWaifu.AssociateCompletionUnlocks(RebekahCurse.SADREBEKAH, yandereWaifu.GetAchievementCompletionMarkData(RebekahCurse.SADREBEKAH))

	print("init STUFF I COPIED FROM FF (2)")
	--init stuff, i copied some code from FF
	--mod.InitCharacterCompletion("Fiend", true)
	--mod.AssociateCompletionUnlocks(yandereWaifu.PLAYER.BIEND, yandereWaifu.GetAchievementCompletionMarkData(yandereWaifu.PLAYER.BIEND))

	--mod.InitCharacterCompletion("Golem", false)
	--mod.AssociateCompletionUnlocks(yandereWaifu.PLAYER.GOLEM, yandereWaifu.GetAchievementCompletionMarkData(yandereWaifu.PLAYER.GOLEM))
end

yandereWaifu:AddCallback(ModCallbacks.MC_POST_GAME_STARTED, function(_,IsContinued)
	yandereWaifu.InitCharacterCompletionMarks()
end)

-- If for some reason you get all completion marks, and then choose to re-lock the items locked behind them, this will unlock them on game start
function yandereWaifu.TryUnlockCompletionAchievements()
	for _, achievement in ipairs(yandereWaifu.ACHIEVEMENT_ORDERED) do
		if achievement.CompletionMark and not achievement:IsUnlocked() then
			if yandereWaifu.IsCompletionMarkUnlocked(achievement.CompletionMark.PlayerName, achievement.CompletionMark.Mark) then
				achievement:Unlock(true)
			end
		end
	end
end

-- Basics, remove not-unlocked collectibles, trinkets, cards from pool
function yandereWaifu.IsCollectibleLocked(id, ignoreModifiers)
	if lockedItems[id] then
		return not lockedItems[id]:IsUnlocked(ignoreModifiers)
	else
		return false
	end
end

function yandereWaifu.IsTrinketLocked(id, ignoreModifiers)
	if lockedTrinkets[id] then
		return not lockedTrinkets[id]:IsUnlocked(ignoreModifiers)
	else
		return false
	end
end

function yandereWaifu.IsCardLocked(id, ignoreModifiers)
	if lockedCards[id] then
		return not lockedCards[id]:IsUnlocked(ignoreModifiers)
	else
		return false
	end
end

yandereWaifu.AchievementTrackerTrinkets = {
	IsaacSoulUnlocked 		= Isaac.GetTrinketIdByName("ISAAC_SOUL_TRACKER"),
	MaggySoulUnlocked 		= Isaac.GetTrinketIdByName("MAGGY_SOUL_TRACKER"),
	CainSoulUnlocked 		= Isaac.GetTrinketIdByName("CAIN_SOUL_TRACKER"),
	JudasSoulUnlocked 		= Isaac.GetTrinketIdByName("JUDAS_SOUL_TRACKER"),
	BlueBabySoulUnlocked 	= Isaac.GetTrinketIdByName("BLUE_BABY_SOUL_TRACKER"),
	EveSoulUnlocked 		= Isaac.GetTrinketIdByName("EVE_SOUL_TRACKER"),
	SamsonSoulUnlocked 		= Isaac.GetTrinketIdByName("SAMSON_SOUL_TRACKER"),
	AzazelSoulUnlocked 		= Isaac.GetTrinketIdByName("AZAZEL_SOUL_TRACKER"),
	LazarusSoulUnlocked 	= Isaac.GetTrinketIdByName("LAZARUS_SOUL_TRACKER"),
	EdenSoulUnlocked 		= Isaac.GetTrinketIdByName("EDEN_SOUL_TRACKER"),
	LostSoulUnlocked 		= Isaac.GetTrinketIdByName("LOST_SOUL_TRACKER"),
	LilithSoulUnlocked 		= Isaac.GetTrinketIdByName("LILITH_SOUL_TRACKER"),
	KeeperSoulUnlocked 		= Isaac.GetTrinketIdByName("KEEPER_SOUL_TRACKER"),
	ApollyonSoulUnlocked 	= Isaac.GetTrinketIdByName("APOLLYON_SOUL_TRACKER"),
	ForgottenSoulUnlocked 	= Isaac.GetTrinketIdByName("FORGOTTEN_SOUL_TRACKER"),
	BethanySoulUnlocked 	= Isaac.GetTrinketIdByName("BETHANY_SOUL_TRACKER"),
	JacobSoulUnlocked 		= Isaac.GetTrinketIdByName("JACOB_SOUL_TRACKER"),
	HorsePillsUnlocked		= Isaac.GetTrinketIdByName("HORSE_PILLS_TRACKER"),
	GoldenBatteryUnlocked	= Isaac.GetTrinketIdByName("GOLDEN_BATTERY_TRACKER"),
	GoldenTrinketsUnlocked	= Isaac.GetTrinketIdByName("GOLDEN_TRINKETS_TRACKER"),
	GoldenHeartsUnlocked	= Isaac.GetTrinketIdByName("GOLDEN_HEART_TRACKER"),
	HalfSoulHeartsUnlocked	= Isaac.GetTrinketIdByName("HALF_SOUL_HEART_TRACKER"), -- Technically just an Everything is Terrible!!! tracker
	ScaredHeartsUnlocked	= Isaac.GetTrinketIdByName("SCARED_HEART_TRACKER"),
	BoneHeartsUnlocked		= Isaac.GetTrinketIdByName("BONE_HEART_TRACKER"),
	RottenHeartsUnlocked	= Isaac.GetTrinketIdByName("ROTTEN_HEART_TRACKER"),
	GoldenPillsUnlocked		= Isaac.GetTrinketIdByName("GOLDEN_PILL_TRACKER"),
	GoldenBombsUnlocked		= Isaac.GetTrinketIdByName("GOLDEN_BOMB_TRACKER"),
	LuckyPennyUnlocked		= Isaac.GetTrinketIdByName("LUCKY_PENNY_TRACKER"),
	StickyNickelUnlocked	= Isaac.GetTrinketIdByName("STICKY_NICKEL_TRACKER"),
	GoldenPennyUnlocked		= Isaac.GetTrinketIdByName("GOLDEN_PENNY_TRACKER"),
	ChargedKeyUnlocked		= Isaac.GetTrinketIdByName("CHARGED_KEY_TRACKER"),
	CellarUnlocked			= Isaac.GetTrinketIdByName("CELLAR_TRACKER"),
	WombUnlocked			= Isaac.GetTrinketIdByName("WOMB_TRACKER"), -- This is the achievement that determines whether having mods enabled disables unlocks
	HagalazUnlocked			= Isaac.GetTrinketIdByName("HAGALAZ_TRACKER"),
	JeraUnlocked			= Isaac.GetTrinketIdByName("JERA_TRACKER"),
	EhwazUnlocked			= Isaac.GetTrinketIdByName("EHWAZ_TRACKER"),
	DagazUnlocked			= Isaac.GetTrinketIdByName("DAGAZ_TRACKER"),
	AnsuzUnlocked			= Isaac.GetTrinketIdByName("ANSUZ_TRACKER"),
	PerthroUnlocked			= Isaac.GetTrinketIdByName("PERTHRO_TRACKER"),
	BerkanoUnlocked			= Isaac.GetTrinketIdByName("BERKANO_TRACKER"),
	AlgizUnlocked			= Isaac.GetTrinketIdByName("ALGIZ_TRACKER"),
	BlankRuneUnlocked		= Isaac.GetTrinketIdByName("BLANK_RUNE_TRACKER"),
	BlackRuneUnlocked		= Isaac.GetTrinketIdByName("BLACK_RUNE_TRACKER"),
	BlackSackUnlocked		= Isaac.GetTrinketIdByName("BLACK_SACK_TRACKER"),
}

--[[if Encyclopedia then
	for _, id in pairs(yandereWaifu.AchievementTrackerTrinkets) do
		Encyclopedia.AddTrinket({
			Class = "Fiend Folio",
			ID = id,
			WikiDesc = "",
			Hide = true,
			ModName = "Fiend Folio",
		})
	end
end]]

local achievementTrackerIds = {}
for name, id in pairs(yandereWaifu.AchievementTrackerTrinkets) do
	achievementTrackerIds[id] = true
	--ffAzuriteSpindownList[id] = true
end

yandereWaifu.TrinketsByID = {}
for name, id in pairs(RebekahCurseTrinkets) do
	yandereWaifu.TrinketsByID[id] = true
end

yandereWaifu.ItemsByID = {}
for name, id in pairs(RebekahCurseItems) do
	yandereWaifu.ItemsByID[id] = true
end

yandereWaifu.CardsByID = {}
for name, id in pairs(RebekahCurseCards) do
	yandereWaifu.CardsByID[id] = true
end

function yandereWaifu.RemoveLockedCollectiblesFromPool()
	local pool = game:GetItemPool()
	for id, achievement in pairs(lockedItems) do
		if not achievement:IsUnlocked() then
			pool:RemoveCollectible(id)
		end
	end

	if not RebekahLocalSavedata.Config.itemsEnabled then
		for _, id in pairs(RebekahCurseItems) do
			pool:RemoveCollectible(id)
		end
	end
end

function yandereWaifu.RemoveLockedTrinketsFromPool()
	local pool = game:GetItemPool()
	for id, achievement in pairs(lockedTrinkets) do
		if not achievement:IsUnlocked() then
			pool:RemoveTrinket(id)
		end
	end

	for id, _ in pairs(achievementTrackerIds) do
		pool:RemoveTrinket(id)
	end

	if not RebekahLocalSavedata.Config.itemsEnabled then
		for _, id in pairs(RebekahCurseTrinkets) do
			pool:RemoveTrinket(id)
		end
	end
end

function yandereWaifu.RemoveLockedFromPools()
	yandereWaifu.RemoveLockedCollectiblesFromPool()
	yandereWaifu.RemoveLockedTrinketsFromPool()
end

local antiRecursion

mod:AddCallback(ModCallbacks.MC_GET_CARD, function(_, rng, card, canSuit, canRune, forceRune)
	if (yandereWaifu.IsCardLocked(card) or yandereWaifu.NoCardNaturalSpawn(card)) and not antiRecursion then
		antiRecursion = true

		local itempool = game:GetItemPool()
		local new
		local i = 0

		repeat
			i = i + 1
			new = itempool:GetCard(rng:GetSeed() + i, canSuit, canRune, forceRune)
		until not (yandereWaifu.IsCardLocked(new) or yandereWaifu.NoCardNaturalSpawn(new))

		antiRecursion = false

		return new
	end
end)

yandereWaifu:AddCallback(ModCallbacks.MC_GET_TRINKET, function(_, trinket, rng)
	if (achievementTrackerIds[trinket] or yandereWaifu.IsTrinketLocked(trinket) or (not RebekahLocalSavedata.Config.itemsEnabled and yandereWaifu.TrinketsByID[trinket])) and not antiRecursion then
		antiRecursion = true

		yandereWaifu.RemoveLockedTrinketsFromPool()

		local itempool = game:GetItemPool()
		local new = itempool:GetTrinket()

		antiRecursion = false

		return new
	end
end)

function yandereWaifu.InitAchievementTrackers()
	local itempool = game:GetItemPool()
	yandereWaifu.AchievementTrackers = {}
	for name, id in pairs(yandereWaifu.AchievementTrackerTrinkets) do
		yandereWaifu.AchievementTrackers[name] = itempool:RemoveTrinket(id)
	end

	--yandereWaifu.PostAchievementUpdate()
end

function yandereWaifu.AchievementsPostGameStart()
	yandereWaifu.TryUnlockCompletionAchievements()
	yandereWaifu.InitAchievementTrackers()
	yandereWaifu.RemoveLockedFromPools()

	--yandereWaifu.TryLockBiendInHome()
end

yandereWaifu:AddCallback(ModCallbacks.MC_POST_GAME_STARTED, yandereWaifu.AchievementsPostGameStart)

function yandereWaifu.GetAchievementSetUnlockCount(set)
	local count = 0
	for _, name in ipairs(set) do
		if yandereWaifu.AchievementTrackers[name] == true then
			count = count + 1
		elseif yandereWaifu.ACHIEVEMENT[name] then
			if yandereWaifu.ACHIEVEMENT[name]:IsUnlocked(true) then
				count = count + 1
			end
		end
	end

	return count
end

function yandereWaifu.IsAchievementSetUnlocked(set)
	return yandereWaifu.GetAchievementSetUnlockCount(set) == #set
end

function yandereWaifu.CanRunUnlockAchievements(forceNew) -- Made in conjunction with Thicco Catto
	if mod.CurrentRunCanGrantUnlocks ~= nil and not forceNew then return mod.CurrentRunCanGrantUnlocks end

	local machine = Isaac.Spawn(6, 11, 0, Vector.Zero, Vector.Zero, nil)
	mod.CurrentRunCanGrantUnlocks = machine:Exists()
	machine:Remove()

	return mod.CurrentRunCanGrantUnlocks
end

mod:AddCallback(ModCallbacks.MC_PRE_GAME_EXIT, function() mod.CurrentRunCanGrantUnlocks = nil end)
mod:AddCallback(ModCallbacks.MC_POST_GAME_END, function() mod.CurrentRunCanGrantUnlocks = nil end)
mod:AddCallback(ModCallbacks.MC_POST_GAME_STARTED, function() mod.CurrentRunCanGrantUnlocks = nil end)

function yandereWaifu.CanChallengeRunUnlockAchievements()
	return mod.AchievementTrackers and mod.AchievementTrackers.WombUnlocked
end

------------------------------------------
-- RANDOM UNLOCK CONDITIONS START HERE! --
------------------------------------------

--i stole this from FF, ill clear it soon
-- every other challenge!
yandereWaifu:AddCallback(ModCallbacks.MC_PRE_PICKUP_COLLISION, function(_, pickup, collider)
	if collider:ToPlayer() then
		if ILIB.game.Challenge == mod.challenges.theRealJon then
			if not yandereWaifu.ACHIEVEMENT.SPARE_RIBS:IsUnlocked(true) then
				yandereWaifu.ACHIEVEMENT.SPARE_RIBS:Unlock()
			end
		elseif game.Challenge == mod.challenges.dirtyBubble then
			if not yandereWaifu.ACHIEVEMENT.PETRIFIED_GEL:IsUnlocked(true) then
				yandereWaifu.ACHIEVEMENT.PETRIFIED_GEL:Unlock()
			end
		elseif game.Challenge == mod.challenges.frogMode then
			if not yandereWaifu.ACHIEVEMENT.SLIPPYS_ORGANS:IsUnlocked(true) then
				yandereWaifu.ACHIEVEMENT.SLIPPYS_ORGANS:Unlock()
			end
		elseif game.Challenge == mod.challenges.handsOn then
			if not yandereWaifu.ACHIEVEMENT.RED_HAND:IsUnlocked(true) then
				yandereWaifu.ACHIEVEMENT.RED_HAND:Unlock()
			end
		elseif game.Challenge == mod.challenges.isaacRebuilt then
			if not yandereWaifu.ACHIEVEMENT.DEIMOS:IsUnlocked(true) then
				yandereWaifu.ACHIEVEMENT.DEIMOS:Unlock()
			end
		elseif game.Challenge == mod.challenges.brickByBrick then
			if not yandereWaifu.ACHIEVEMENT.BRICK_SEPARATOR:IsUnlocked(true) then
				yandereWaifu.ACHIEVEMENT.BRICK_SEPARATOR:Unlock()
			end
		elseif game.Challenge == mod.challenges.towerOffense then
			if not yandereWaifu.ACHIEVEMENT.LAWN_DARTS:IsUnlocked(true) then
				yandereWaifu.ACHIEVEMENT.LAWN_DARTS:Unlock()
			end
		elseif game.Challenge == mod.challenges.chinaShop then
			if not mod.ACHIEVEMENT.CHINAS_BELONGINGS:IsUnlocked(true) then
				mod.ACHIEVEMENT.CHINAS_BELONGINGS:Unlock()
			end
		elseif game.Challenge == mod.challenges.theGauntlet then
			if not mod.ACHIEVEMENT.GAUNTLET_BEATEN:IsUnlocked(true) then
				mod.ACHIEVEMENT.GAUNTLET_BEATEN:Unlock()
			end
		end
	end
end, PickupVariant.PICKUP_TROPHY)


-- Unlocks based on sets of unlocks
-- Soul of random, deluxe, kings of the minor arcana, flea circus

--[[
local soulOfRandomList = {
	"IsaacSoulUnlocked",
	"MaggySoulUnlocked",
	"CainSoulUnlocked",
	"JudasSoulUnlocked",
	"BlueBabySoulUnlocked",
	"EveSoulUnlocked",
	"SamsonSoulUnlocked",
	"AzazelSoulUnlocked",
	"LazarusSoulUnlocked",
	"EdenSoulUnlocked",
	"LostSoulUnlocked",
	"LilithSoulUnlocked",
	"KeeperSoulUnlocked",
	"ApollyonSoulUnlocked",
	"ForgottenSoulUnlocked",
	"BethanySoulUnlocked",
	"JacobSoulUnlocked",

	"SOUL_OF_FIEND",
	"SOUL_OF_GOLEM"
}

local minorArcanaKingsList = {
	"HorsePillsUnlocked",
	"GoldenBatteryUnlocked",
	"GoldenTrinketsUnlocked"
}

local deluxeList = {
	"GoldenHeartsUnlocked",
	"HalfSoulHeartsUnlocked",
	"ScaredHeartsUnlocked",
	"BoneHeartsUnlocked",
	"RottenHeartsUnlocked",

	"IMMORAL_HEART",
	"MORBID_HEART",
}

local fleaCircusList = {
	"FLEA_OF_MELTDOWN",
	"FLEA_OF_DELUGE",
	"FLEA_OF_POLLUTION",
	"FLEA_OF_PROPAGANDA"
}

function yandereWaifu.PostAchievementUpdate(noNote)
	if mod.savedata.shownUnlocksChoicePopup and mod.CanRunUnlockAchievements() then
		if not yandereWaifu.ACHIEVEMENT.SOUL_OF_RANDOM:IsUnlocked(true) then
			local soulStonesCount = yandereWaifu.GetAchievementSetUnlockCount(soulOfRandomList)
			if soulStonesCount >= #soulOfRandomList / 2 then
				yandereWaifu.ACHIEVEMENT.SOUL_OF_RANDOM:Unlock(noNote)
			end
		end

		if not yandereWaifu.ACHIEVEMENT.FLEA_CIRCUS:IsUnlocked(true) and yandereWaifu.IsAchievementSetUnlocked(fleaCircusList) then
			yandereWaifu.ACHIEVEMENT.FLEA_CIRCUS:Unlock(noNote)
		end

		if not yandereWaifu.ACHIEVEMENT.MINOR_ARCANA_KINGS:IsUnlocked(true) and yandereWaifu.IsAchievementSetUnlocked(minorArcanaKingsList) then
			yandereWaifu.ACHIEVEMENT.MINOR_ARCANA_KINGS:Unlock(noNote)
		end

		if not yandereWaifu.ACHIEVEMENT.DELUXE:IsUnlocked(true) and yandereWaifu.IsAchievementSetUnlocked(deluxeList) then
			yandereWaifu.ACHIEVEMENT.DELUXE:Unlock(noNote)
		end
	end
end

-- King of diamonds, golden reward plate, mern, skip card
local isCurrentRoomClear
local existentFoolsGold = {}
local existentRewardPlates = {}

mod:AddCallback(ModCallbacks.MC_POST_UPDATE, function()
	if mod.CanRunUnlockAchievements() then
		local room = game:GetRoom()
		isCurrentRoomClear = room:IsClear()

		if not yandereWaifu.ACHIEVEMENT.KING_OF_DIAMONDS:IsUnlocked(true) then
			for _, index in pairs(existentFoolsGold) do
				local grid = room:GetGridEntity(index)
				if grid and grid:GetType() == GridEntityType.GRID_ROCK_GOLD and grid.State == 2 then
					mod.savedata.foolsGoldBombed = mod.savedata.foolsGoldBombed + 1
				end
			end

			existentFoolsGold = {}
			for i = 0, room:GetGridSize() do
				local grid = room:GetGridEntity(i)
				if grid and grid:GetType() == GridEntityType.GRID_ROCK_GOLD and not StageAPI.IsCustomGrid(i) then
					if grid.State == 1 then
						table.insert(existentFoolsGold, i)
					end
				end
			end
			
			if mod.savedata.foolsGoldBombed >= 25 then
				yandereWaifu.ACHIEVEMENT.KING_OF_DIAMONDS:Unlock()
			end
		end

		if not yandereWaifu.ACHIEVEMENT.GOLDEN_REWARD_PLATE:IsUnlocked(true) then
			for _, index in pairs(existentRewardPlates) do
				local grid = room:GetGridEntity(index)
				if grid and grid:ToPressurePlate() and (grid.State == 3 or grid.State == 4) then
					mod.savedata.pressedRewardPlates = mod.savedata.pressedRewardPlates + 1
				end
			end

			existentRewardPlates = {}
			for i = 0, room:GetGridSize() do
				local grid = room:GetGridEntity(i)
				if grid and grid:ToPressurePlate() and grid:GetVariant() == 1 and grid.State == 0 and not StageAPI.IsCustomGrid(i) then
					table.insert(existentRewardPlates, i)
				end
			end

			if mod.savedata.pressedRewardPlates >= 79 then
				yandereWaifu.ACHIEVEMENT.GOLDEN_REWARD_PLATE:Unlock()
			end
		end
	end

	if not yandereWaifu.ACHIEVEMENT.MERN:IsUnlocked(true) and Isaac.CountEntities(nil, 3, FamiliarVariant.MERN_4) > 0 then
		yandereWaifu.ACHIEVEMENT.MERN:Unlock()
	end
end)

local function ThrownFoolsGoldCheck(projectile)
	local sprite = projectile:GetSprite()
	if projectile:IsDead() and sprite:GetFilename() == "gfx/grid/grid_rock.anm2" and sprite:GetAnimation() == "foolsgold" then
		mod.savedata.foolsGoldBombed = mod.savedata.foolsGoldBombed + 1
	end
end

mod:AddCallback(ModCallbacks.MC_POST_ENTITY_REMOVE, function(_, entity) if mod.CanRunUnlockAchievements() and entity.Variant == ProjectileVariant.PROJECTILE_GRID then ThrownFoolsGoldCheck(entity) end end, 9)
mod:AddCallback(ModCallbacks.MC_POST_ENTITY_REMOVE, function(_, entity) if mod.CanRunUnlockAchievements() and entity.Variant == TearVariant.GRIDENT               then ThrownFoolsGoldCheck(entity) end end, 2)

-- Skip card, zodiac beggar, bifurcated stars, morbus!
mod:AddCallback(ModCallbacks.MC_POST_NEW_ROOM, function()
	if mod.INITIALISED_UNLOCKS then
		local room = game:GetRoom()

		if isCurrentRoomClear ~= nil and not isCurrentRoomClear and mod.CanRunUnlockAchievements() then
			isCurrentRoomClear = nil

			mod.savedata.skippedRooms = mod.savedata.skippedRooms + 1
			if mod.savedata.skippedRooms >= 20 and not yandereWaifu.ACHIEVEMENT.SKIP_CARD:IsUnlocked(true) then
				yandereWaifu.ACHIEVEMENT.SKIP_CARD:Unlock()
			end
		end

		if not yandereWaifu.ACHIEVEMENT.ZODIAC_BEGGAR:IsUnlocked(true) and room:GetType() == RoomType.ROOM_PLANETARIUM then
			yandereWaifu.ACHIEVEMENT.ZODIAC_BEGGAR:Unlock()
		end

		if not yandereWaifu.ACHIEVEMENT.BIFURCATED_STARS:IsUnlocked(true) and game:GetStateFlag(GameStateFlag.STATE_BACKWARDS_PATH) and room:GetType() == RoomType.ROOM_TREASURE and room:IsFirstVisit() then
			yandereWaifu.ACHIEVEMENT.BIFURCATED_STARS:Unlock()
		end

		if not yandereWaifu.ACHIEVEMENT.MORBUS:IsUnlocked(true) then
			local level = game:GetLevel()
			if level:GetStage() == LevelStage.STAGE4_1 and level:GetStageType() == StageType.STAGETYPE_REPENTANCE then -- I'm in Corpse
				yandereWaifu.ACHIEVEMENT.MORBUS:Unlock()
			end
		end
	end
end)

mod:AddCallback(ModCallbacks.MC_PRE_GAME_EXIT, function()
	isCurrentRoomClear = nil
end)

-- fiend heart (aehrt), purple putty, fraudulent fungus, haunted penny, shard of china
mod:AddCallback(ModCallbacks.MC_POST_PEFFECT_UPDATE, function(_, player)
	if mod.ACHIEVEMENT.IMMORAL_HEART:IsUnlocked(true) then
		if not mod.ACHIEVEMENT.FIEND_HEART:IsUnlocked(true) and mod.GetImmoralHeartsNum(player) >= 12 then
			mod.ACHIEVEMENT.FIEND_HEART:Unlock()
		end

		if not mod.ACHIEVEMENT.PURPLE_PUTTY:IsUnlocked(true) and mod.savedata.immoralMinionKills >= 50 then
			mod.ACHIEVEMENT.PURPLE_PUTTY:Unlock()
		end
	end

	if not mod.ACHIEVEMENT.FRAUDULENT_FUNGUS:IsUnlocked(true) and player:GetRottenHearts() >= 3 then
		mod.ACHIEVEMENT.FRAUDULENT_FUNGUS:Unlock()
	end

	if not mod.ACHIEVEMENT.HAUNTED_PENNY:IsUnlocked(true) and Isaac.CountEntities(player, 3, FamiliarVariant.WISP, -1) >= 8 then
		mod.ACHIEVEMENT.HAUNTED_PENNY:Unlock()
	end
end)

-- plague of decay (kill a rotten beggar)
mod:AddCallback(ModCallbacks.MC_POST_ENTITY_REMOVE, function(_, entity)
	if game:GetRoom():GetFrameCount() > 0 and entity.Type == EntityType.ENTITY_SLOT and entity.Variant == 18 and entity.EntityCollisionClass == 4 then
		if not yandereWaifu.ACHIEVEMENT.PLAGUE_OF_DECAY:IsUnlocked(true) then
			yandereWaifu.ACHIEVEMENT.PLAGUE_OF_DECAY:Unlock()
		end
	end
end)

-- thirteen of stars
mod:AddCallback(ModCallbacks.MC_USE_ITEM, function(_, id, rng, player)
	if id < 0 and not yandereWaifu.ACHIEVEMENT.THIRTEEN_OF_STARS:IsUnlocked(true) and not mod.savedata.tmtrainerIdsUsed[tostring(id)] then -- TMTRAINER time baby
		mod.savedata.tmtrainerIdsUsed[tostring(id)] = true

		if rng:RandomFloat() < 0.2 then
			yandereWaifu.ACHIEVEMENT.THIRTEEN_OF_STARS:Unlock()
		end
	end
end)

local soulStonesList = {
	-- Vanilla
	[Card.CARD_SOUL_ISAAC] 		= true,
	[Card.CARD_SOUL_MAGDALENE]	= true,
	[Card.CARD_SOUL_CAIN]		= true,
	[Card.CARD_SOUL_JUDAS]		= true,
	[Card.CARD_SOUL_BLUEBABY]	= true,
	[Card.CARD_SOUL_EVE]		= true,
	[Card.CARD_SOUL_SAMSON]		= true,
	[Card.CARD_SOUL_AZAZEL]		= true,
	[Card.CARD_SOUL_LAZARUS]	= true,
	[Card.CARD_SOUL_EDEN]		= true,
	[Card.CARD_SOUL_LOST]		= true,
	[Card.CARD_SOUL_LILITH]		= true,
	[Card.CARD_SOUL_KEEPER]		= true,
	[Card.CARD_SOUL_APOLLYON]	= true,
	[Card.CARD_SOUL_FORGOTTEN]	= true,
	[Card.CARD_SOUL_BETHANY]	= true,
	[Card.CARD_SOUL_JACOB]		= true,

	-- FF
	[mod.ITEM.CARD.SOUL_OF_FIEND]		= true,
	[mod.ITEM.CARD.SOUL_OF_GOLEM]		= true,
	[mod.ITEM.CARD.SOUL_OF_RANDOM]		= true,
}

-- soul of golem
mod:AddCallback(ModCallbacks.MC_USE_CARD, function(_, id, player)
	if soulStonesList[id] and player:GetPlayerType() == mod.PLAYER.GOLEM then
		if not mod.ACHIEVEMENT.SOUL_OF_GOLEM:IsUnlocked(true) then
			mod.ACHIEVEMENT.SOUL_OF_GOLEM:Unlock()
		end
	end
end)

-- immoral hearts, Glass Chest
local function GameHasFiend()
	for _, player in pairs(Isaac.FindByType(1)) do
		if player:ToPlayer():GetPlayerType() == mod.PLAYER.FIEND then
			return true
		end
	end

	return false
end

mod:AddCallback(ModCallbacks.MC_PRE_SPAWN_CLEAN_AWARD, function()
	if not mod.ACHIEVEMENT.IMMORAL_HEART:IsUnlocked(true) and GameHasFiend() then
		local room = game:GetRoom()

		if room:GetType() == RoomType.ROOM_BOSS and game:GetLevel():GetStage() ~= LevelStage.STAGE7 then
			local boss = room:GetBossID()
			if boss == 6 or boss == 89 then -- Mom / Maus Mom
				mod.ACHIEVEMENT.IMMORAL_HEART:Unlock()
			end
		end
	end

	if not mod.ACHIEVEMENT.GLASS_CHEST:IsUnlocked(true) then
		local room = game:GetRoom()
		if room:GetType() == RoomType.ROOM_BOSS and room:IsMirrorWorld() then
			mod.ACHIEVEMENT.GLASS_CHEST:Unlock()
		end
	end
end)

-- flea of meltdown, flea of deluge
mod:AddCallback(ModCallbacks.MC_POST_NPC_DEATH, function(_, npc)
	if npc.Variant == mod.FF.Meltdown2.Var and game:GetRoom():GetType() == RoomType.ROOM_BOSS and mod.CanRunUnlockAchievements() then
		mod.savedata.meltdownKills = mod.savedata.meltdownKills + 1

		if mod.savedata.meltdownKills >= 3 then
			if not mod.ACHIEVEMENT.FLEA_OF_MELTDOWN:IsUnlocked(true) then
				mod.ACHIEVEMENT.FLEA_OF_MELTDOWN:Unlock()
			end
			if not mod.ACHIEVEMENT.FLEA_OF_DELUGE:IsUnlocked(true) then
				mod.ACHIEVEMENT.FLEA_OF_DELUGE:Unlock()
			end
		end
	end
end, mod.FF.Meltdown2.ID)

-- flea of pollution, flea of propaganda
mod:AddCallback(ModCallbacks.MC_POST_NPC_DEATH, function(_, npc)
	if npc.Variant == mod.FF.Pollution2.Var and game:GetRoom():GetType() == RoomType.ROOM_BOSS and mod.CanRunUnlockAchievements() then
		mod.savedata.pollutionKills = mod.savedata.pollutionKills + 1

		if mod.savedata.pollutionKills >= 3 then
			if not mod.ACHIEVEMENT.FLEA_OF_POLLUTION:IsUnlocked(true) then
				mod.ACHIEVEMENT.FLEA_OF_POLLUTION:Unlock()
			end

			if not mod.ACHIEVEMENT.FLEA_OF_PROPAGANDA:IsUnlocked(true) then
				mod.ACHIEVEMENT.FLEA_OF_PROPAGANDA:Unlock()
			end
		end
	end
end, mod.FF.Pollution2.ID)

-- queen of clubs
mod:AddCallback(ModCallbacks.MC_POST_NPC_DEATH, function(_, npc)
	if npc.Variant == 0 and game:GetRoom():GetBossID() == 93 and not mod.ACHIEVEMENT.QUEEN_OF_CLUBS:IsUnlocked(true) then
		mod.ACHIEVEMENT.QUEEN_OF_CLUBS:Unlock()
	end
end, EntityType.ENTITY_SINGE)

-- The Right Hand
mod:AddCallback(ModCallbacks.MC_POST_NPC_DEATH, function(_, npc)
	if npc.Variant == 1 and game:GetRoom():GetBossID() == 40 and not mod.ACHIEVEMENT.RIGHT_HAND:IsUnlocked(true) then
		local anyPlayerHasLeftHand
		mod.AnyPlayerDo(function(player)
			if player:HasTrinket(TrinketType.TRINKET_LEFT_HAND) or player:HasTrinket(mod.ITEM.ROCK.LEFT_FOSSIL) then
				anyPlayerHasLeftHand = true
			end
		end)

		if anyPlayerHasLeftHand then
			mod.ACHIEVEMENT.RIGHT_HAND:Unlock()
		end
	end
end, EntityType.ENTITY_ISAAC)

-- Morbid Heart
mod:AddCallback(ModCallbacks.MC_POST_NPC_DEATH, function(_, npc)
	if npc.Variant == mod.FF.MrDead.Var and game:GetRoom():GetType() == RoomType.ROOM_BOSS then
		if not mod.ACHIEVEMENT.MORBID_HEART:IsUnlocked(true) then
			mod.ACHIEVEMENT.MORBID_HEART:Unlock()
		end

		if game.Challenge == 0 then
			Isaac.Spawn(5, mod.PICKUP.VARIANT.MORBID_HEART, 0, npc.Position, RandomVector(), npc)
		end
	end
end, mod.FF.MrDead.ID)

-- Beast Beggar
mod:AddCallback(ModCallbacks.MC_POST_ENTITY_KILL, function(_, npc)
	if npc.Variant == 0 then -- The Beast, not horsemen
		if not mod.ACHIEVEMENT.BEAST_BEGGAR:IsUnlocked(true) then
			mod.ACHIEVEMENT.BEAST_BEGGAR:Unlock()
		end
	end
end, EntityType.ENTITY_BEAST)

-- challenge unlocks!
-- dad's home, green house
mod:AddCallback(ModCallbacks.MC_PRE_PICKUP_COLLISION, function(_, pickup, collider)
	if collider:ToPlayer() then
		if game.Challenge == mod.challenges.dadsHomePlus then
			if not yandereWaifu.ACHIEVEMENT.GREEN_HOUSE:IsUnlocked(true) then
				yandereWaifu.ACHIEVEMENT.GREEN_HOUSE:Unlock()
			end
		end
	end
end, 960) -- Golden Medallion

-- Biend
mod:AddCallback(ModCallbacks.MC_POST_UPDATE, function()
	for _, slot in pairs(Isaac.FindByType(6, 14)) do
		if slot:GetSprite():IsFinished("PayPrize") then
			if Isaac.GetPlayer():GetPlayerType() == mod.PLAYER.FIEND then
				yandereWaifu.ACHIEVEMENT.BIEND:Unlock()
			end
		end
	end
end)


------------------------------------------
-- LOCKED THINGS DISABLING STARTS HERE! --
------------------------------------------

-- Cards placed in rooms, zodiac beggar, beast beggar
mod:AddCallback(ModCallbacks.MC_PRE_ENTITY_SPAWN, function(_, typ, var, sub, pos, vel, spawner, seed)
	if typ == EntityType.ENTITY_PICKUP and var == PickupVariant.PICKUP_TAROTCARD then
		if yandereWaifu.IsCardLocked(sub) then
			local itempool = game:GetItemPool()
			return {5, 300, itempool:GetCard(seed, false, false, false), seed}
		end
	elseif typ == EntityType.ENTITY_SLOT then
		if var == mod.FF.ZodiacBeggar.Var and not yandereWaifu.ACHIEVEMENT.ZODIAC_BEGGAR:IsUnlocked() and game:GetRoom():GetType() ~= RoomType.ROOM_PLANETARIUM then
			return {5, 10, 3, seed}
		elseif var == mod.FF.EvilBeggar.Var and not yandereWaifu.ACHIEVEMENT.BEAST_BEGGAR:IsUnlocked() then
			return {6, 5, 0, seed}
		elseif var == 1040 and not mod.ACHIEVEMENT.GOLDEN_SLOT_MACHINE:IsUnlocked() then
			return {6, 1, 0, seed}
		end
	end
end)

-- Locked Cards nuclear option
mod:AddCallback(ModCallbacks.MC_POST_PICKUP_INIT, function(_, pickup)
	if yandereWaifu.IsCardLocked(pickup.SubType) then
		pickup:Morph(5, 300, 0, true, true)
	end
end, 300)

-- Immoral hearts & variants
mod:AddCallback(ModCallbacks.MC_POST_PICKUP_INIT, function(_, pickup)
	if pickup.SpawnerType ~= 1 and not mod.ACHIEVEMENT.IMMORAL_HEART:IsUnlocked() and not GameHasFiend() then
		pickup:Morph(5, PickupVariant.PICKUP_HEART, HeartSubType.HEART_BLACK, true, true)
	end
end, mod.PICKUP.VARIANT.IMMORAL_HEART)

mod:AddCallback(ModCallbacks.MC_POST_PICKUP_INIT, function(_, pickup)
	if pickup.SpawnerType ~= 1 and not mod.ACHIEVEMENT.IMMORAL_HEART:IsUnlocked() and not GameHasFiend() then
		pickup:Morph(5, mod.PICKUP.VARIANT.HALF_BLACK_HEART, 0, true, true)
	end
end, mod.PICKUP.VARIANT.HALF_IMMORAL_HEART)

mod:AddCallback(ModCallbacks.MC_POST_PICKUP_INIT, function(_, pickup)
	if pickup.SpawnerType ~= 1 and not mod.ACHIEVEMENT.IMMORAL_HEART:IsUnlocked() and not GameHasFiend() then
		pickup:Morph(5, mod.PICKUP.VARIANT.BLENDED_BLACK_HEART, 0, true, true)
	end
end, mod.PICKUP.VARIANT.BLENDED_IMMORAL_HEART)

-- Morbid hearts
mod:AddCallback(ModCallbacks.MC_POST_PICKUP_INIT, function(_, pickup)
	if not mod.ACHIEVEMENT.MORBID_HEART:IsUnlocked() then
		if mod.AchievementTrackers.RottenHeartsUnlocked then
			pickup:Morph(5, PickupVariant.PICKUP_HEART, HeartSubType.HEART_ROTTEN)
		else
			pickup:Morph(5, PickupVariant.PICKUP_HEART, HeartSubType.HEART_FULL)
		end
	end
end, mod.PICKUP.VARIANT.MORBID_HEART)

mod:AddCallback(ModCallbacks.MC_POST_PICKUP_INIT, function(_, pickup)
	if not mod.ACHIEVEMENT.MORBID_HEART:IsUnlocked() then
		if mod.AchievementTrackers.RottenHeartsUnlocked then
			pickup:Morph(5, PickupVariant.PICKUP_HEART, HeartSubType.HEART_ROTTEN)
		else
			pickup:Morph(5, PickupVariant.PICKUP_HEART, HeartSubType.HEART_HALF)
		end
	end
end, mod.PICKUP.VARIANT.TWOTHIRDS_MORBID_HEART)

mod:AddCallback(ModCallbacks.MC_POST_PICKUP_INIT, function(_, pickup)
	if not mod.ACHIEVEMENT.MORBID_HEART:IsUnlocked() then
		if mod.AchievementTrackers.RottenHeartsUnlocked then
			pickup:Morph(5, PickupVariant.PICKUP_HEART, HeartSubType.HEART_ROTTEN)
		else
			pickup:Morph(5, PickupVariant.PICKUP_HEART, HeartSubType.HEART_HALF)
		end
	end
end, mod.PICKUP.VARIANT.THIRD_MORBID_HEART)

-- Golden cursed penny
mod:AddCallback(ModCallbacks.MC_POST_PICKUP_INIT, function(_, pickup)
	if pickup.SubType == mod.PICKUP.COIN.GOLDENCURSED and not mod.ACHIEVEMENT.GOLDEN_CURSED_PENNY:IsUnlocked() then
		pickup:Morph(5, PickupVariant.PICKUP_COIN, mod.PICKUP.COIN.CURSED)
	end
end, PickupVariant.PICKUP_COIN)

-- Haunted Penny
mod:AddCallback(ModCallbacks.MC_POST_PICKUP_INIT, function(_, pickup)
	if pickup.SubType == mod.PICKUP.COIN.HAUNTED and not mod.ACHIEVEMENT.HAUNTED_PENNY:IsUnlocked() then
		pickup:Morph(5, PickupVariant.PICKUP_COIN, CoinSubType.COIN_PENNY)
	end
end, PickupVariant.PICKUP_COIN)

-- Dire chest
mod:AddCallback(ModCallbacks.MC_POST_PICKUP_INIT, function(_, pickup)
	if not mod.ACHIEVEMENT.DIRE_CHEST:IsUnlocked() then
		pickup:Morph(5, PickupVariant.PICKUP_REDCHEST, 0)
	end
end, mod.PICKUP.VARIANT.DIRE_CHEST)

-- Glass chest
mod:AddCallback(ModCallbacks.MC_POST_PICKUP_INIT, function(_, pickup)
	if not mod.ACHIEVEMENT.GLASS_CHEST:IsUnlocked() then
		pickup:Morph(5, PickupVariant.PICKUP_LOCKEDCHEST, 0)
	end
end, mod.PICKUP.VARIANT.GLASS_CHEST)

-- 52 Deck
mod:AddCallback(ModCallbacks.MC_POST_PICKUP_INIT, function(_, pickup)
	if pickup.SubType == 11 then
		if not mod.ACHIEVEMENT["52_DECK"]:IsUnlocked() then
			pickup:Morph(5, PickupVariant.PICKUP_GRAB_BAG, 0)
		end
	end
end, mod.PICKUP.VARIANT.DECK52)

-- Biend Locks
mod:AddCallback(ModCallbacks.MC_POST_NEW_ROOM, function()
	if not yandereWaifu.ACHIEVEMENT.BIEND:IsUnlocked() then
		local level = game:GetLevel()
		local desc = level:GetCurrentRoomDesc()

		local playerType = Isaac.GetPlayer():GetPlayerType()

		if level:GetStage() == LevelStage.STAGE8 and desc.SafeGridIndex == 94 and ((playerType == mod.PLAYER.FIEND and mod.CanRunUnlockAchievements()) or playerType == mod.PLAYER.BIEND) then
			for _, shopkeeper in pairs(Isaac.FindByType(17)) do
				shopkeeper:Remove()
			end

			for _, item in pairs(Isaac.FindByType(5)) do
				item:Remove()
			end

			local room = game:GetRoom()
			local centre = room:GetCenterPos()
			local biend = Isaac.FindByType(6, 14)[1] or Isaac.Spawn(6, 14, 0, centre, Vector.Zero, nil)
			local sprite = biend:GetSprite()
			sprite:ReplaceSpritesheet(0, "gfx/characters/costumes/player_fiendb.png")
			sprite:LoadGraphics()

			if playerType == mod.PLAYER.BIEND then
				local door = room:GetDoor(2)
				room:RemoveGridEntity(door:GetGridIndex(), 0, false)

				for i = 1, 3 do
					Isaac.Spawn(1000, 21, 0, centre, Vector.Zero, nil)
				end

				Isaac.Spawn(1000, 64, 0, centre, Vector.Zero, nil)
			end
		end
	end
end)

function yandereWaifu.SafeEndGame()
	-- disable achievements
	game:GetSeeds():AddSeedEffect(SeedEffect.SEED_PREVENT_ALL_CURSES)
	game:End(3)
end

mod:AddCallback(ModCallbacks.MC_POST_RENDER, function()
	if not yandereWaifu.ACHIEVEMENT.BIEND:IsUnlocked() and game.Difficulty >= Difficulty.DIFFICULTY_GREED and Isaac.GetPlayer():GetPlayerType() == mod.PLAYER.BIEND then
		yandereWaifu.SafeEndGame()
	end

	if Isaac.GetPlayer():GetPlayerType() == mod.PLAYER.BOLEM then
		yandereWaifu.SafeEndGame()
	end
end)

mod:AddCallback(ModCallbacks.MC_POST_PLAYER_UPDATE, function(_, player)
	if player.FrameCount > 0 then
		yandereWaifu.TryLockBiendInHome(player)
	end
end)

function yandereWaifu.TryLockBiendInHome(player)
	player = player or Isaac.GetPlayer()
	if not yandereWaifu.ACHIEVEMENT.BIEND:IsUnlocked() and player:GetPlayerType() == mod.PLAYER.BIEND then
		player.ControlsEnabled = false
		player.Visible = false
		player:GetData().BiendClosetMode = true

		local hud = game:GetHUD()
		hud:SetVisible(false)

		if game.Difficulty < Difficulty.DIFFICULTY_GREED then
			local level = game:GetLevel()
			if level:GetStage() ~= LevelStage.STAGE8 then
				Isaac.ExecuteCommand("stage 13")
				level:ChangeRoom(95)

				player.Position = Vector(245, 280)
				player:SetPocketActiveItem(CollectibleType.COLLECTIBLE_RED_KEY, ActiveSlot.SLOT_POCKET2)
				player:UseActiveItem(CollectibleType.COLLECTIBLE_RED_KEY, UseFlag.USE_OWNED + UseFlag.USE_NOANIM, ActiveSlot.SLOT_POCKET2)
				player:RemoveCollectible(CollectibleType.COLLECTIBLE_RED_KEY)
				player.Position = Vector(160, 280)

				SFXManager():Stop(SoundEffect.SOUND_UNLOCK00)
			end
		end
	end
end]]